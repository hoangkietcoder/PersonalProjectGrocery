import 'dart:async';
import 'dart:developer';
import 'package:bloc/bloc.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import '../../../Models/Product/getData_ProductFromFirebase.dart';
import '../../../Repository/Firebase_Database/Product/product_repository.dart';
import '../../../tranformer.dart';

part 'home_event.dart';
part 'home_state.dart';

class HomeBloc extends Bloc<HomeEvent, HomeState> {
  HomeBloc({required ProductRepository productRepository}) :_productRepository = productRepository,
        super(HomeState(hasReachedEnd: false ,lsProduct: []
            
      )) {

    // ƒëƒÉng k√≠ s·ª± ki·ªán
    on<_ProductHomeEventChange>(_onProductChanged);
    on<SearchProductHomeEventChange>(_onSearchProductChanged, transformer: debounce(Duration(milliseconds: 500)));
    // on<FetchPage>(_onPageFetched);



    // l·∫Øng nghe s·ª± ki·ªán ( khi c√≥ s·ª± ki·ªán th√¨ auto c·∫≠p nh·∫≠t - cho ch·ª©c nƒÉng th√™m s·∫£n ph·∫©m)
    _productSubscription = _productRepository.createProduct.listen((data) {
      print("üì• Stream nh·∫≠n ${data.length} s·∫£n ph·∫©m"); // D√≤ng n√†y ch·∫°y m·∫•y l·∫ßn khi reload?
      add(_ProductHomeEventChange(data));
    }
    );


  }
  final ProductRepository _productRepository;

  // kh·ªüi t·∫°o stream truy·ªÅn v√†o l√† 1 l·ªõp Model ( ƒë·ªÉ l√∫c th√™m s·∫£n ph·∫©m xong th√¨ trang home t·ª± fetch l·∫°i d·ªØ li·ªáu )
  late final StreamSubscription<List<getDataProduct>> _productSubscription;




  @override
  Future<void> close() {
    _productSubscription.cancel();

    return super.close();
  }

  // t·ª± ƒë·ªông d√πng khi b·∫•m n√∫t th√™m s·∫£n ph·∫©m ( t·ª± fetch )
  void _onProductChanged(
      _ProductHomeEventChange event,
      Emitter<HomeState> emit,
      ){
    return emit(state.copyWith(
      lsProduct: event.lsProduct,
      statusHome: StatusHome.successful
    ));
  }



  // x·ª≠ l√≠ thanh t√¨m ki·∫øm
  Future<void> _onSearchProductChanged(SearchProductHomeEventChange event, Emitter<HomeState> emit,) async{
    try{
      emit(state.copyWith(statusHome: StatusHome.initial));
      final data = await _productRepository.searchItemsByName(event.query);
      return emit(state.copyWith(
          lsProduct: data,
          statusHome: StatusHome.successful
      ));
    }catch(error){
      if(isClosed) return;
      return emit(state.copyWith(
          lsProduct: [],
          statusHome: StatusHome.failure
      ));
    }

  }


  // x·ª≠ l√≠ ph√¢n trang
  // Future<void> _onPageFetched(FetchPage event, Emitter<HomeState> emit) async {
  //   // x·ª≠ l√≠ n·∫øu h·∫øt danh s√°ch s·∫Ω return l·∫°i
  //   if (state.hasReachedEnd) return;
  //
  //   try {
  //     emit(state.copyWith(statusLoadPage: StatusLoadPage.loading));
  //     await Future.delayed(const Duration(milliseconds: 800)); //  Th√™m delay ƒë·ªÉ load trang ch·∫≠m h∆°n
  //
  //     const pageSize = 3;
  //     // g·ªçi h√†m l·∫•y s·∫£n ph·∫©m
  //     final newProducts = await _productRepository.fetchProducts(limit: pageSize);
  //
  //     // n·∫øu danh s√°ch r·ªóng => hasReachedEnd: true ch·∫∑n kh√¥ng cho load th√™m n·ªØa
  //     if (newProducts.isEmpty) {
  //       emit(state.copyWith(hasReachedEnd: true));
  //     } else {
  //       // n·∫øu c√≤n d·ªØ li·ªáu th√¨ G·ªôp danh s√°ch s·∫£n ph·∫©m c≈© state.lsProduct v·ªõi danh s√°ch m·ªõi newProducts
  //       emit(state.copyWith(
  //         statusLoadPage: StatusLoadPage.success,
  //         lsProduct: List.of(state.lsProduct)..addAll(newProducts),
  //         hasReachedEnd: newProducts.length < pageSize  // ƒê√°nh d·∫•u k·∫øt th√∫c n·∫øu √≠t h∆°n pageSize
  //       ));
  //     }
  //   } catch (_) {
  //     emit(state.copyWith(statusLoadPage: StatusLoadPage.failure));
  //   }
  // }

}
