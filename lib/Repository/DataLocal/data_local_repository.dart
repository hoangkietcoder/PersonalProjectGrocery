


import '../../ObjectBox/ObjectBox.dart';
import '../../ObjectBox/model/ModelProductLocal.dart';
import '../../objectbox.g.dart';

class DataLocalRepository {
  DataLocalRepository({required ObjectBoxService objectBoxService}) : _objectBoxService = objectBoxService;
    final ObjectBoxService _objectBoxService;

  // 1 L∆∞u nhi·ªÅu s·∫£n ph·∫©m
  Future<void> saveProducts(List<ModelProductLocal> products) async {
    final box = _objectBoxService.productBox;
    box.putMany(products);
  }

  // L∆∞u 1 s·∫£n ph·∫©m
  Future<void> saveProduct(ModelProductLocal product) async {
    final box = _objectBoxService.productBox;
    box.put(product);
    print(" ƒê√£ l∆∞u s·∫£n ph·∫©m: ${product.nameProduct}");
  }



  // l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m d∆∞·ªõi local l√™n v√† refesh l·∫°i trang ( d√πng stream )
  Stream<List<ModelProductLocal>> getAllProducts()  {
    final box = _objectBoxService.productBox;
    final products = box.query(); //
    return products.watch(
        // theo d√µi stream,  map((e) => e.find() : tr·∫£ v·ªÅ danh s√°ch m·ªói khi c·∫≠p nh·∫≠t
        triggerImmediately: true).map((e) => e.find());;
  }

  Future<void> deleteAllProductsLocal() async {
    final box = _objectBoxService.productBox;
    await box.removeAll();
  }

  // ‚úÖ L·∫•y theo ID (n·∫øu c·∫ßn)
  ModelProductLocal? getProductById(int id) {
    final box = _objectBoxService.productBox;
    return box.get(id);

  }

  // ‚úÖ Xo√° theo ID
  Future<void> deleteProduct(int id) async {
    final box = _objectBoxService.productBox;
    box.remove(id);
  }





  // ‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  Future<void> updateProduct(ModelProductLocal product) async {
    final box = _objectBoxService.productBox;
    if (product.id != 0) {
      box.put(product); // put s·∫Ω update n·∫øu id t·ªìn t·∫°i
    }
  }

  // x·ª≠ l√≠ khi b·ªã tr√πng d·ªØ li·ªáu c√≥ s·∫µn th√¨ ch·ªâ vi·ªác tƒÉng s·ªë l∆∞·ª£ng l√™n 1
  Future<void> addOrIncreaseProduct(ModelProductLocal product) async {
    final box = _objectBoxService.productBox;
    // T√¨m s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i theo fireBaseId
    final query = box.query(ModelProductLocal_.fireBaseId.equals(product.fireBaseId)).build();
    final existing = query.findFirst();
    query.close();


    if(existing != null){
      // C·ªông d·ªìn s·ªë l∆∞·ª£ng
      final oldQty = int.tryParse(existing.quantityProduct) ?? 0;
      final newQty = oldQty + 1;
      final updatedProduct = existing.copyWith(
        quantityProduct: newQty.toString(),
      );
      await saveProduct(updatedProduct); // ‚úÖ d√πng l·∫°i h√†m ƒë√£ c√≥
      print('‚úÖ ƒê√£ tƒÉng s·ªë l∆∞·ª£ng l√™n $newQty');
    } else {
      // N·∫øu ch∆∞a c√≥, th√™m m·ªõi v·ªõi quantity = 1
      final newProduct = product.copyWith(quantityProduct: '1');
      await saveProduct(newProduct); // ‚úÖ d√πng l·∫°i h√†m ƒë√£ c√≥
      print('üÜï ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng');
    }

  }
}